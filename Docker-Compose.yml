services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-gateway
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
      - "8080:8080"  # Internal health checks and status
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api-gateway
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # API Gateway
  api-gateway:
    image: rav2001h/spinlock-api-gateway:latest
    container_name: spinlock-api-gateway
    # ports:
    #   - "8000:8000"  # Removed external port exposure - only accessible through Nginx
    environment:
      - USER_AUTH_SERVICE_URL=${USER_AUTH_SERVICE_URL:-http://user-auth-service:8000}
      - TELEMETRY_SERVICE_URL=${TELEMETRY_SERVICE_URL:-http://device-telemetry:8000}
      - DEVICE_HEALTH_SERVICE_URL=${DEVICE_HEALTH_SERVICE_URL:-http://device-health:8000}
      - DEVICE_EVENTS_SERVICE_URL=${DEVICE_EVENTS_SERVICE_URL:-http://event-processing:8000}
      - DEVICE_NOTIFICATION_SERVICE_URL=${DEVICE_NOTIFICATION_SERVICE_URL:-http://device-notification:8000}
      - DEVICE_ONBOARDING_SERVICE_URL=${DEVICE_ONBOARDING_SERVICE_URL:-http://device-onboarding:8000}
      - ADMIN_MANAGEMENT_SERVICE_URL=${ADMIN_MANAGEMENT_SERVICE_URL:-http://admin-management:8000}
      - GATEWAY_PORT=${GATEWAY_PORT:-8000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - user-auth-service
      - device-telemetry
      - device-health
      - event-processing
      - device-notification
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  admin-management:
    image: rav2001h/admin-management:latest
    container_name: admin-management-microservice
    # ports:
    #   - "8005:8000"  # Removed external port exposure - only accessible through API Gateway
    environment:
      - USER_AUTH_SERVICE_URL=${USER_AUTH_SERVICE_URL:-http://user-auth-service:8000}
      - DEVICE_ONBOARDING_SERVICE_URL=${DEVICE_ONBOARDING_SERVICE_URL:-http://device-onboarding:8000}
    depends_on:
      - user-auth-service
      - device-onboarding
      - mongo
      - mongo-express
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s  

  # User Authentication Microservice (from Docker Hub)
  user-auth-service:
    image: rav2001h/user-auth-microservice:latest
    container_name: user-auth-microservice
    # ports:
    #   - "8001:8000"  # Removed external port exposure - only accessible through API Gateway
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL:-sqlite:///UserData.db}
      - DEBUG=${DEBUG:-false}
    volumes:
      - user_auth_data:/app/data
    networks:
      - microservices-network
    restart: unless-stopped
    env_file:
      - service_account.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  
  # Device Telemetry Service
  device-telemetry:
    image: rav2001h/device-telemetry:latest
    container_name: device-telemetry-microservice
    # ports:
    #   - "8002:8000"  # Removed external port exposure - only accessible through API Gateway
    environment:
      - MQTT_BROKER_HOST=mqtt-broker
      - MQTT_BROKER_PORT=1883
      - MQTT_TOPIC=bike/telemetry
      - MONGO_DB=mongodb://mongo:27017
      - MONGO_USERNAME=root
      - MONGO_PASSWORD=example
      - KAFKA_URL=kafka:29092
    depends_on:
      - mqtt-broker
      - kafka
      - user-auth-service
      - mongo
      - mongo-express
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  device-onboarding:
    image: rav2001h/device-onboarding:latest
    container_name: device-onboarding-microservice
    # ports:
    #   - "8003:8000"  # Removed external port exposure - only accessible through API Gateway
    environment:
      - DATABASE_URL=${DATABASE_URL:-sqlite:///UserData.db}
    depends_on:
    - mongo
    - user-auth-service
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  device-command:
    image: rav2001h/device-command:latest
    container_name: device-command-microservice
    environment:
      - MONGO_DB=mongodb://mongo:27017
      - MONGO_USERNAME=root
      - MONGO_PASSWORD=example
      - DEVICE_ONBOARDING_SERVICE_URL=${DEVICE_ONBOARDING_SERVICE_URL:-http://device-onboarding:8000}
      - USER_AUTH_SERVICE_URL=${USER_AUTH_SERVICE_URL:-http://user-auth-service:8000}
    depends_on:
      - device-onboarding
      - user-auth-service
      - mongo
      - mongo-express
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  event-processing:
    image: rav2001h/device-event:latest
    container_name: event-processing-microservice
    # ports:
    #   - "8003:8000"  # Removed external port exposure - only accessible through API Gateway
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=notify-device_events
      - MQTT_BROKER_HOST=mqtt-broker
      - MQTT_BROKER_PORT=1883
      - MQTT_TOPIC=bike/telemetry
      - USER_AUTH_SERVICE_URL=${USER_AUTH_SERVICE_URL:-http://user-auth-service:8000}
      - DEVICE_ONBOARDING_SERVICE_URL=${DEVICE_ONBOARDING_SERVICE_URL:-http://device-onboarding:8000}
    depends_on:
      - mqtt-broker
      - kafka
      - user-auth-service
      - device-onboarding
      - mongo
      - mongo-express
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  device-health:
    image: rav2001h/device-health-monitoring:latest
    container_name: device-health-monitoring-microservice
    environment:
      - MQTT_BROKER_HOST=mqtt-broker
      - MQTT_BROKER_PORT=1883
      - MQTT_TOPIC=bike/health
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MONGO_DB=mongodb://mongo:27017
      - MONGO_USERNAME=root
      - MONGO_PASSWORD=example
    depends_on:
      - mqtt-broker
      - kafka
      - user-auth-service
      - mongo
      - mongo-express
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  device-notification:
    image: rav2001h/device-notifications:latest
    container_name: device-notification-microservice
    # ports:
    #   - "8004:8000"  # Removed external port exposure - only accessible through API Gateway
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=notify-device_events
      - KAFKA_GROUP_ID=notification_service
      - QUEUE_POLL_INTERVAL=1.0
    depends_on:
      - kafka
      - user-auth-service
      - mongo
      - mongo-express
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  #Device Telemetry Service
  # device-telemetry:
  #   image: device-telemetry:latest
  #   container_name: device-telemetry
  #   ports:
  #     - "8002:8000"
  #   environment:
  #     - MQTT_BROKER_URL=mqtt://mqtt-broker:1883
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
  #   depends_on:
  #     - mqtt-broker
  #     - kafka
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped

  # # Device Onboarding Service
  # device-onboarding:
  #   image: device-onboarding:latest
  #   container_name: device-onboarding
  #   ports:
  #     - "8003:8000"
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped

  # # GeoLocation Service
  # geolocation:
  #   image: geolocation:latest
  #   container_name: geolocation
  #   ports:
  #     - "8004:8000"
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped

  # # Parking Slot Service
  # parking-slot:
  #   image: parking-slot:latest
  #   container_name: parking-slot
  #   ports:
  #     - "8005:8000"
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped

  # # Health Monitoring Service
  # health-monitoring:
  #   image: health-monitoring:latest
  #   container_name: health-monitoring
  #   ports:
  #     - "8006:8000"
  #   environment:
  #     - SERVICES_TO_MONITOR=user-auth-service,device-telemetry,geolocation,parking-slot
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped

  # # Alert and Event Processing Service
  # alert-event-processing:
  #   image: alert-event-processing:latest
  #   container_name: alert-event-processing
  #   ports:
  #     - "8007:8000"
  #   environment:
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
  #   depends_on:
  #     - mqtt-broker
  #     - kafka
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped

  # # Admin Management Service
  # admin-management:
  #   image: admin-management:latest
  #   container_name: admin-management
  #   ports:
  #     - "8008:8000"
  #   depends_on:
  #     - user-auth-service
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped

  # # Notification Service
  # notification:
  #   image: notification:latest
  #   container_name: notification
  #   ports:
  #     - "8009:8000"
  #   environment:
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
  #   depends_on:
  #     - kafka
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped

  # # Logging Service
  # logging:
  #   image: logging:latest
  #   container_name: logging
  #   ports:
  #     - "8010:8000"
  #   volumes:
  #     - logs_data:/app/logs
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped
  

  # MQTT Broker
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    container_name: mqtt-broker
    ports:
      - "1883:1883"  # MQTT port - accessible externally for publishing
      - "9001:9001"  # WebSocket port - for web clients (optional)
    volumes:
      - mqtt_data:/mosquitto/data
      - mqtt_logs:/mosquitto/log
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-t", "$$SYS/broker/uptime", "-C", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Message Broker (KRaft Mode - No Zookeeper Required)
  kafka:
    image: confluentinc/cp-kafka:7.6.0  # Latest version supporting KRaft
    container_name: kafka
    # ports:
    #   - "9092:9092"  # Removed external port exposure - only accessible internally
    environment:
      # KRaft Configuration (Kafka Raft - No Zookeeper)
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'INTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:29093,EXTERNAL://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      
      # Cluster ID - Generated with proper format for KRaft
      CLUSTER_ID: 'AndsiAcrn06ldNdTf9QLrg'  # Base64 UUID format required by KRaft
      
      # Topic and Cluster Configuration
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      
      # Log and Data Configuration
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      
      # Performance Tuning
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168  # 7 days
      KAFKA_LOG_SEGMENT_BYTES: 1073741824  # 1GB
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000  # 5 minutes
      
      # KRaft Specific Settings
      KAFKA_METADATA_LOG_SEGMENT_MS: 15000
      KAFKA_METADATA_MAX_RETENTION_MS: 86400000
      KAFKA_LOG_CLEANUP_POLICY: 'delete'
      KAFKA_LOG_RETENTION_BYTES: 1073741824
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:29092 | grep -q 'Produce'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Kafka UI (for monitoring and management)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8001:8080"  # Direct access on port 8001
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      # Removed Zookeeper configuration since we're using KRaft
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
    depends_on:
      - kafka
    networks:
      - microservices-network
    restart: unless-stopped

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db
    networks:
      - microservices-network
     

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    depends_on:
      - mongo
    networks:
      - microservices-network
    volumes:
      - mongo_express_data:/data/db
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: false

  mysql-db:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: example

  # Watchtower for automatic container updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true  # Remove old images after updates
      - WATCHTOWER_POLL_INTERVAL=30  # Check for updates every 30 seconds
      - WATCHTOWER_INCLUDE_STOPPED=true  # Also monitor stopped containers
    networks:
      - microservices-network
    restart: unless-stopped

# Networks
networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  nginx_logs:
    driver: local
  user_auth_data:
    driver: local
  logs_data:
    driver: local
  mqtt_data:
    driver: local
  mqtt_logs:
    driver: local
  kafka_data:
    driver: local
  kafka_ui_data:
    driver: local
  mongo_data:
    driver: local
  mongo_express_data:
    driver: local
  mysql_data:
    driver: local
